# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ULClaF8VkxprHNuAHbEEYfCgtfdG7t1j
"""

!wget https://www.udacity.com/api/nodes/5420148578/supplemental_media/titanic-datacsv/download
!cp download csv.csv

import pandas as pd
import matplotlib.pyplot as plt

def add_value_labels(ax, spacing=5, fontsize=20):

    for rect in ax.patches:
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2
        space = spacing
        va = 'bottom'
        if y_value < 0:
            space *= -1
            va = 'top'
        label = "{:.1f}".format(y_value)
        ax.annotate(
            label,                      
            (x_value, y_value),         
            xytext=(0, space),          
            textcoords="offset points", 
            ha='center',                
            va=va, fontsize=fontsize)                          
    return ax

titanic = pd.read_csv("csv.csv")
titanic

titanic["Age"] = titanic["Age"].fillna(0)
titanic = titanic.sort_values(by=["Age"])
titanic.Pclass = titanic.Pclass.astype(str)
titanic = titanic.drop("Cabin", 1)
titanic = titanic.drop("Parch", 1)
titanic = titanic.drop("Ticket", 1)
embarked = {"S":1,"C":2, "Q":3}
for a,b in embarked.items():
  titanic = titanic.apply(lambda x: x.replace(a,b))

titanic = titanic.apply(lambda x: x.replace("\n",""))
  
titanic.Pclass = titanic.Pclass.astype(int)
titanic.Embarked = titanic.Embarked.fillna(0)
titanic.Embarked = titanic.Embarked.astype(int)
titanic = titanic.drop("Name", 1)
titanic = titanic.drop("PassengerId", 1)
titanic = titanic.drop("SibSp", 1)
titanic = titanic.drop(titanic[titanic["Age"] == 0.0].index)
titanic = titanic.drop(titanic[titanic["Embarked"] == 0].index)


valores = titanic['Survived'].value_counts()
dados = {"estado":["mortos","vivos"], "valores":[valores[0],valores[1]]}
sobreviventes = pd.DataFrame(data=dados)
sobreviventes

fig, (ax1, ax2) = plt.subplots(2, 1)
fig, (ax3, ax4) = plt.subplots(2, 1)
fig, (ax5, ax6) = plt.subplots(2, 1)
fig, (ax7)= plt.subplots(1)

add_value_labels(titanic[titanic["Age"] > 0.0]["Age"].plot(kind="hist",
                                                           x=titanic.index,
                                                           y=titanic.Age,
                                                           ax=ax3, 
                                                           colormap="plasma", 
                                                           title="Quantidade de pessoas por idade", 
                                                           figsize=(15,15)),
                                                           fontsize=14 )

sobreviventes.plot(kind="pie",
                   ax=ax1, x="estado", 
                   y="valores", labels=["Morreu", "Sobreviveu"], 
                   fontsize=14,title="sobreviventes titanic", 
                   figsize=(15,15),colormap="summer",autopct='%.2f%%')


add_value_labels(
    sobreviventes.plot(kind="bar", ax=ax2, x="estado", 
                                    y="valores", title="sobreviventes titanic",
                                    fontsize=14,colormap="plasma", figsize=(15,15)), 
   fontsize=14)

titanic.Pclass.value_counts().plot(kind="pie", autopct="%0.2f%%",figsize=(15,15),
                                   colormap="summer",fontsize=14,
                                   title="Porcentagem de pessoas por classe", 
                                   ax=ax4)

titanic[titanic["Survived"] == 0].sort_values("Pclass").Pclass.value_counts().plot(kind="pie",figsize=(15,15), 
                                                                                   ax=ax6,labels=["Terceira","Segunda","Primeira"],
                                                                                   fontsize=14,title="Porcentagem de pessoas que morreram por classe", 
                                                                                   autopct="%0.2f%%",colormap="summer")

titanic[titanic["Survived"] == 1].Pclass.value_counts().plot(kind="pie", ax=ax5,  
                                                             title="Porcentagem de pessoas que sobreviveram por classe",
                                                             labels=["Primeira","Terceira","Segunda"],autopct="%0.2f%%",
                                                             figsize=(15,15),colormap="summer",fontsize=14)


titanic[titanic["Age"]<15.0][titanic["Sex"] == "female"]["Survived"].value_counts().plot(kind="pie",ax=ax7, title="Sobreviventes prioritarios",
                                                                                         labels=["Sobreviveu","Morreu"],
                                                                                         autopct='%.2f%%',fontsize=14,  
                                                                                         figsize=(15,15))

import numpy as np
from sklearn.metrics import accuracy_score
titanic.Sex = titanic.Sex.replace("male", 1)
titanic.Sex = titanic.Sex.replace("female", 0)
titanic = titanic.sample(frac=1).reset_index(drop=True)
titanic = titanic.drop("Embarked", 1)

x_train = titanic.iloc[:356]
y_train = x_train.Survived
x_train = x_train.drop("Survived", 1)

x_teste = titanic.iloc[356:]
y_teste = x_teste.Survived
x_teste = x_teste.drop("Survived", 1)

y_titanic = titanic.Survived
x_titanic = titanic.drop("Survived", 1)

x_train

import seaborn as sns

sns.pairplot(x_train[["Pclass",	"Sex",	"Age", "Fare"]], diag_kind="kde")

import random
from sklearn.ensemble import AdaBoostClassifier
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.metrics import roc_curve, auc
import numpy as np
from matplotlib.legend_handler import HandlerLine2D
min_samples_leafs = np.linspace(0.1, 0.5, 5, endpoint=True)
max_depths = np.linspace(1, 32, 32, endpoint=True)
min_samples_splits = np.linspace(0.1, 1.0, 10, endpoint=True)

train_results = []
test_results = []
score = 0

for min_samples_split in min_samples_splits:
  for min_samples_leaf in min_samples_leafs:
    for max_depth in max_depths:
       rnd = random.randint(1,9999)
       titanic_model =  AdaBoostClassifier(tree.DecisionTreeClassifier(max_depth=max_depth, min_samples_leaf=min_samples_leaf, min_samples_split=min_samples_split),random_state= rnd)
       titanic_model.fit(x_train, y_train)
       train_pred = titanic_model.predict(x_train)
       false_positive_rate, true_positive_rate, thresholds = roc_curve(y_train, train_pred)
       roc_auc = auc(false_positive_rate, true_positive_rate)
       
       train_results.append(roc_auc)
       y_pred = titanic_model.predict(x_teste)
       false_positive_rate, true_positive_rate, thresholds = roc_curve(y_teste, y_pred)
       roc_auc = auc(false_positive_rate, true_positive_rate)
       
       if roc_auc > score:
          titanic_finish_model = titanic_model
          score = roc_auc
          print("O melhor score at√© o momento foi:"+str(score))
          
       test_results.append(roc_auc)

print("O melhor teste foi:"+str(score))
print("produzimos um total de:"+str(len(test_results))+" testes")

try:
  from matplotlib.legend_handler import HandlerLine2D
  line1, = plt.plot(max_depths, train_results, "b", label="Train AUC")
  line2, = plt.plot(max_depths, test_results, "r", label="Test AUC")
  plt.legend(handler_map={line1: HandlerLine2D(numpoints=2)})
  plt.ylabel("AUC score")
  plt.xlabel("Tree depth")
  plt.show()
except ValueError:
  None

y_sk_teste_pred = titanic_finish_model.predict(x_teste)


y_sk_pred_titanic = titanic_finish_model.predict(x_titanic)

for x in range(0,len(y_tf_teste_pred)):
  print(y_tf_teste_pred[x][1])# = round(y_tf_teste_pred[x])

mostra = 130 #@param {type:"slider", min:2, max:365, step:1}
plt.figure()
plt.scatter(x_teste.index[:mostra], y_teste[:mostra], c="k")
plt.plot(x_teste[:mostra].index, y_sk_teste_pred[:mostra], c="g", linewidth=2)
plt.xlabel("data")
plt.ylabel("target")
plt.title("Decision Tree Classifier SKlearn")
plt.legend()
plt.show()

mostra = 204 #@param {type:"slider", min:2, max:365, step:1}
plt.figure()
plt.scatter(x_titanic.index[:mostra], y_titanic[:mostra], c="k")
plt.plot(x_titanic[:mostra].index, y_sk_pred_titanic[:mostra], c="g", linewidth=2)
plt.xlabel("data")
plt.ylabel("target")
plt.title("Decision Tree Classifier of titanic Sklearn ")
plt.legend()
plt.show()

